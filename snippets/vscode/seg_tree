"Segment Tree": {
  "prefix": "segTree",
  "body": [
    "template<typename T=long long>",
    "T func(T a, T b) {",
    "    return __gcd(a, b) ;",
    "}",
    "",
    "",
    "template<typename T=long long>",
    "class SegmentTree {",
    "    vector<T> tree;",
    "    int size;",
    "    T mnVal;",
    " ",
    "public:",
    "    SegmentTree(vector<T>& array, T val) {",
    "        size = array.size();",
    "        tree.resize(4 * size);",
    "        mnVal = val;",
    "        buildTree(array, 0, 0, size - 1);",
    "    }",
    " ",
    "private:",
    "    void buildTree(vector<T>& array, int treeIndex, int left, int right) {",
    "        if (left == right) {",
    "            tree[treeIndex] = array[left];",
    "            return;",
    "        }",
    "        int mid = left + (right - left) / 2;",
    "        buildTree(array, 2 * treeIndex + 1, left, mid);",
    "        buildTree(array, 2 * treeIndex + 2, mid + 1, right);",
    "        tree[treeIndex] = func<T>(tree[2 * treeIndex + 1], tree[2 * treeIndex + 2]);",
    "    }",
    " ",
    "    T query(int treeIndex, int left, int right, int queryLeft, int queryRight) {",
    "        if (queryLeft <= left && right <= queryRight)",
    "            return tree[treeIndex];",
    "        int mid = left + (right - left) / 2;",
    "        T minValue = mnVal ;",
    "        if (queryLeft <= mid)",
    "            minValue = func<T>(minValue, query(2 * treeIndex + 1, left, mid, queryLeft, queryRight));",
    "        if (queryRight > mid)",
    "            minValue = func<T>(minValue, query(2 * treeIndex + 2, mid + 1, right, queryLeft, queryRight));",
    "        return minValue;",
    "    }",
    " ",
    "public:",
    "    T query(int left, int right) {",
    "        return query(0, 0, size - 1, left, right);",
    "    }",
    "};",
    ""
  ],
  "description": "Segment Tree"
}
