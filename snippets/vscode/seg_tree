{
	"": {
		"prefix": "segTr",
		"body": [
		  "template<typename T=long long>",
		  "T func(T a, T b) {",
		  "$0", 
		  "    return a+b ;",
		  "}",
		  "",
		  "",
		  "template<typename T=long long>",
		  "class SegmentTree {",
		  "    vector<T> tree;",
		  "    int size;",
		  " ",
		  "public:",
		  "    SegmentTree(vector<T>& array) {",
		  "        size = array.size();",
		  "        tree.resize(4 * size);",
		  "        buildTree(array, 0, 0, size - 1);",
		  "    }",
		  " ",
		  "private:",
		  "    void buildTree(vector<T>& array, int treeIndex, int left, int right) {",
		  "        if (left == right) {",
		  "            tree[treeIndex] = array[left];",
		  "            return;",
		  "        }",
		  "        int mid = left + (right - left) / 2;",
		  "        buildTree(array, 2 * treeIndex + 1, left, mid);",
		  "        buildTree(array, 2 * treeIndex + 2, mid + 1, right);",
		  "        tree[treeIndex] = func<T>(tree[2 * treeIndex + 1], tree[2 * treeIndex + 2]);",
		  "    }",
		  " ",
		  "    int query(int treeIndex, int left, int right, int queryLeft, int queryRight) {",
		  "        if (queryLeft <= left && right <= queryRight)",
		  "            return tree[treeIndex];",
		  "        int mid = left + (right - left) / 2;",
		  "        int minValue = 0 ;",
		  "        if (queryLeft <= mid)",
		  "            minValue = func<T>(minValue, query(2 * treeIndex + 1, left, mid, queryLeft, queryRight));",
		  "        if (queryRight > mid)",
		  "            minValue = func<T>(minValue, query(2 * treeIndex + 2, mid + 1, right, queryLeft, queryRight));",
		  "        return minValue;",
		  "    }",
		  " ",
		  "public:",
		  "    int query(int left, int right) {",
		  "        return query(0, 0, size - 1, left, right);",
		  "    }",
		  "};",
		  ""
		],
		"description": ""
	  }
}
