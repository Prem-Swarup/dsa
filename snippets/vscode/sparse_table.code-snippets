{
	"sparse_table": {
		"prefix": "sparse_table",
		"body": [
		  "",
		  "template<typename T=long long>",
		  "inline T func(T a, T b){",
		  "  $0",
		  "  return a+b;",
		  "}",
		  "",
		  "template<typename T=long long>",
		  "class SparseTable {",
		  "private:",
		  "    std::vector<std::vector<T>> table;",
		  "    T stVal;",
		  "public:",
		  "    SparseTable(const std::vector<T>& arr) {",
		  "        T n = arr.size();",
		  "        T logN = log2(n) + 1;",
		  "        table.resize(n, std::vector<T>(logN));",
		  "		     stVal = 0$1;",
		  "        // Initialize the table with values from the original array",
		  "        for (T i = 0; i < n; i++) {",
		  "            table[i][0] = arr[i];",
		  "        }",
		  "",
		  "        // Build the sparse table",
		  "        for (T j = 1; (1 << j) <= n; j++) {",
		  "            for (T i = 0; i + (1 << j) - 1 < n; i++) {",
		  "                table[i][j] = func(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    T query(T left, T right) {",
		  "        T sum = stVal;",
		  "",
		  "        for (T j = log2(right - left + 1); j >= 0; j--) {",
		  "            if ((1 << j) <= (right - left + 1)) {",
		  "                sum = func(sum, table[left][j]);",
		  "                left += (1 << j);",
		  "            }",
		  "        }",
		  "",
		  "        return sum;",
		  "    }",
		  "",
		  "    T query2(T L, T R) {",
		  "      int j = (int)log2(R - L + 1);",
		  "      return func(table[L][j], table[R - (1 << j) + 1][j]);",
		  "    }",
		  "      ",
		  "};",
		  ""
		],
		"description": "sparse_table"
	  }
}
